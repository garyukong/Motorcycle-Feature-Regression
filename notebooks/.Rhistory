data=df)
# Calculate robust standard errors
se_mod1 <- mod1 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod2 <- mod2 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod3 <- mod3 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod4 <- mod4 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod5 <- mod5 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
stargazer(mod1, mod2, mod3, mod4, mod5,
header = FALSE,
type = "latex",
title = "Estimated Regressions",
dep.var.caption  = "Output Variable: Mean Rating (1-5 scale)",
align=TRUE,
column.sep.width = "-1.5pt",
font.size = "small",
se = list(se_mod1, se_mod2, se_mod3, se_mod4, se_mod5),
covariate.labels = c(
"Torque (Nm)",
"Fuel Capacity (Litres)",
"Category: Classic",
"Category: Custom / cruiser",
"Category: Enduro / offroad",
"Category: Naked bike",
"Category: Scooter",
"Category: Sport",
"Category: Super motard",
"Category: Touring",
"Constant"
),
omit = c("Year", "Brand", "Dry", "Wheelbase", "Brakes", "Seat", "Cooling", "Front.brakes", "Transmission"),
notes.label= "Significance levels",
float=TRUE,
table.placement="H",
omit.stat=c("adj.rsq","f"),
add.lines = list(
c("Wheelbase (mm)", "", "\\checkmark", "\\checkmark", "\\checkmark ", "\\checkmark"),
c("Cooling System", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Front Brakes", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Transmission Type", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Year", "", "", "", "\\checkmark", "\\checkmark"),
c("Brand", "", "", "", "", "\\checkmark"),
"\\hline"
),
star.cutoffs = c(0.05, 0.01, 0.001)
)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stargazer)
library(lmtest)
library(ggplot2)
library(tidyverse)
library(magrittr)
library(sandwich)
library(corrplot)
library(tinytex)
library("GGally")
df <- read.csv("../data/raw/all_bikez_curated.csv")
n_00_raw = nrow(df)
df = filter(df, df$Year >= 2013)
n_00_yearclean = nrow(df)
df <- na.omit(df, cols="Rating")
df <- filter(df, df$Rating > 0 & df$Rating <=5)
n_01_ratingclean = nrow(df)
df <- na.omit(df, cols="Power")
df <- filter(df, df$Torque..Nm. > 0)
n_02_powertorqueclean = nrow(df)
df <- na.omit(df, df$Fuel.capacity..lts.)
n_03_fuelcapacityclean = nrow(df)
df <- na.omit(df, df$Dry.weight..kg.)
n_04_dryweightclean = nrow(df)
df <- na.omit(df, df$Wheelbase..mm.)
n_05_wheelbaseclean = nrow(df)
df <- na.omit(df, df$Seat.height..mm.)
n_06_seatheightclean = nrow(df)
df <- filter(df, df$Cooling.system != "")
n_07_coolingsystemclean = nrow(df)
df <- filter(df, df$Front.brakes != "")
n_08_frontbrakesclean = nrow(df)
df <- filter(df, df$Transmission.type != "")
n_09_transmissionclean = nrow(df)
df <- filter(df, df$Category != "")
n_10_categoryclean = nrow(df)
# Clean "Cooling System"
## Save Ns for each category
n_coolingsystem = data.frame(table(df$Cooling.system))
n_coolingsystem_air = n_coolingsystem[n_coolingsystem$Var1=='Air',2]
n_coolingsystem_liquid = n_coolingsystem[n_coolingsystem$Var1=='Liquid',2]
n_coolingsystem_oilair = n_coolingsystem[n_coolingsystem$Var1=='Oil & air',2]
## Recode to two categories
df <- mutate(df,Cooling.system = case_when(Cooling.system == "Liquid" ~ "Liquid",
Cooling.system == "Air" | Cooling.system == "Oil & air" ~ "Air/Oil & Air"))
n_11_coolingsystemclean = nrow(df)
# Clean "Front Brakes"
## Extract initial characters
df$Front.brakes <- str_extract(df$Front.brakes, "^[aA-zZ]+ [aA-zZ]+")
## Save Ns for each category
n_frontbrakes = data.frame(table(df$Front.brakes))
n_frontbrakes_doubledisc = n_frontbrakes[n_frontbrakes$Var1=='Double disc',2]
n_frontbrakes_expandingbrake = n_frontbrakes[n_frontbrakes$Var1=='Expanding brake',2]
n_frontbrakes_singledisc = n_frontbrakes[n_frontbrakes$Var1=='Single disc',2]
## Filter to only single disc and double disc
df <- filter(df, df$Front.brakes == "Single disc" | df$Front.brakes == "Double disc")
n_12_frontbrakeclean = nrow(df)
# Clean "Transmission Type"
## Save Ns for each category
n_transmission = data.frame(table(df$Transmission.type))
n_transmission_belt = n_transmission[n_transmission$Var1=='Belt',2]
n_transmission_chain = n_transmission[n_transmission$Var1=='Chain',2]
n_transmission_shaftdrive = n_transmission[n_transmission$Var1=='Shaft drive',2]
## Filter to two categories
df <- filter(df, df$Transmission.type == "Belt" | df$Transmission.type == "Chain")
n_13_transmissionclean = nrow(df)
# Clean "Category"
# Get a summary of categories
n_cat <- data.frame(table(df$Category))
cat_distinct_preclean <- nrow(n_cat)
# Filter out observations with small category
df <- filter(df, !df$Category %in% c("Cross / motocross", "Minibike, cross", "Minibike, sport", "ATV", "Sport touring")) # Where N <= 30
cat_distinct_postclean <- nrow(data.frame(table(df$Category)))
n_14_categoryclean <- nrow(df)
# Find correlations between variables
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
matrix <- cor(df_num)
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
pair_plot <- ggpairs(df,
columns = c("Torque..Nm.","Fuel.capacity..lts.", "Wheelbase..mm.", "Rating"),
columnLabels = c("Torque", "Fuel Capacity", "Wheelbase", "Rating"),
axisLabels = 'none',
switch = 'y',
aes(alpha=0.2)
)
par(mar = c(4, 4, .1, .1))
corrplot(
matrix,
method = 'color',
order ='AOE',
type ='lower',
diag = FALSE,
addCoef.col="grey",
tl.cex = 0.7,
number.cex=0.7
)
pair_plot
df %>% group_by(Engine.cylinder) %>% summarise(mean_torque=mean(Torque..Nm.))
df %>% group_by(Engine.stroke) %>% summarise(mean_torque=mean(Torque..Nm.))
df %>% group_by(Gearbox) %>% summarise(mean_torque=mean(Torque..Nm.))
# Fit models
mod1 <- lm(Rating ~ Torque..Nm.,
data=df)
mod2 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type,
data=df)
mod3 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type,
data=df)
mod4 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type
+ as.factor(Year),
data=df)
mod5 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type
+ as.factor(Year)
+ Brand,
data=df)
# Calculate robust standard errors
se_mod1 <- mod1 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod2 <- mod2 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod3 <- mod3 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod4 <- mod4 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod5 <- mod5 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
stargazer(mod1, mod2, mod3, mod4, mod5,
header = FALSE,
type = "latex",
title = "Estimated Regressions",
dep.var.caption  = "Output Variable: Mean Rating (1-5 scale)",
align=TRUE,
column.sep.width = "-1.5pt",
font.size = "small",
se = list(se_mod1, se_mod2, se_mod3, se_mod4, se_mod5),
covariate.labels = c(
"Torque (Nm)",
"Fuel Capacity (Litres)",
"Category: Classic",
"Category: Custom / cruiser",
"Category: Enduro / offroad",
"Category: Naked bike",
"Category: Scooter",
"Category: Sport",
"Category: Super motard",
"Category: Touring",
"Constant"
),
omit = c("Year", "Brand", "Dry", "Wheelbase", "Brakes", "Seat", "Cooling", "Front.brakes", "Transmission"),
notes.label= "Significance levels",
float=TRUE,
table.placement="H",
omit.stat=c("adj.rsq","f"),
add.lines = list(
c("Wheelbase (mm)", "", "\\checkmark", "\\checkmark", "\\checkmark ", "\\checkmark"),
c("Cooling System", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Front Brakes", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Transmission Type", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Year", "", "", "", "\\checkmark", "\\checkmark"),
c("Brand", "", "", "", "", "\\checkmark"),
"\\hline"
),
star.cutoffs = c(0.05, 0.01, 0.001)
)
knitr::opts_chunk$set(echo = FALSE)
library(dplyr)
library(stargazer)
library(lmtest)
library(ggplot2)
library(tidyverse)
library(magrittr)
library(sandwich)
library(corrplot)
library(tinytex)
library("GGally")
df <- read.csv("../data/raw/all_bikez_curated.csv")
n_00_raw = nrow(df)
df = filter(df, df$Year >= 2013)
n_00_yearclean = nrow(df)
df <- na.omit(df, cols="Rating")
df <- filter(df, df$Rating > 0 & df$Rating <=5)
n_01_ratingclean = nrow(df)
df <- na.omit(df, cols="Power")
df <- filter(df, df$Torque..Nm. > 0)
n_02_powertorqueclean = nrow(df)
df <- na.omit(df, df$Fuel.capacity..lts.)
n_03_fuelcapacityclean = nrow(df)
df <- na.omit(df, df$Dry.weight..kg.)
n_04_dryweightclean = nrow(df)
df <- na.omit(df, df$Wheelbase..mm.)
n_05_wheelbaseclean = nrow(df)
df <- na.omit(df, df$Seat.height..mm.)
n_06_seatheightclean = nrow(df)
df <- filter(df, df$Cooling.system != "")
n_07_coolingsystemclean = nrow(df)
df <- filter(df, df$Front.brakes != "")
n_08_frontbrakesclean = nrow(df)
df <- filter(df, df$Transmission.type != "")
n_09_transmissionclean = nrow(df)
df <- filter(df, df$Category != "")
n_10_categoryclean = nrow(df)
# Clean "Cooling System"
## Save Ns for each category
n_coolingsystem = data.frame(table(df$Cooling.system))
n_coolingsystem_air = n_coolingsystem[n_coolingsystem$Var1=='Air',2]
n_coolingsystem_liquid = n_coolingsystem[n_coolingsystem$Var1=='Liquid',2]
n_coolingsystem_oilair = n_coolingsystem[n_coolingsystem$Var1=='Oil & air',2]
## Recode to two categories
df <- mutate(df,Cooling.system = case_when(Cooling.system == "Liquid" ~ "Liquid",
Cooling.system == "Air" | Cooling.system == "Oil & air" ~ "Air/Oil & Air"))
n_11_coolingsystemclean = nrow(df)
# Clean "Front Brakes"
## Extract initial characters
df$Front.brakes <- str_extract(df$Front.brakes, "^[aA-zZ]+ [aA-zZ]+")
## Save Ns for each category
n_frontbrakes = data.frame(table(df$Front.brakes))
n_frontbrakes_doubledisc = n_frontbrakes[n_frontbrakes$Var1=='Double disc',2]
n_frontbrakes_expandingbrake = n_frontbrakes[n_frontbrakes$Var1=='Expanding brake',2]
n_frontbrakes_singledisc = n_frontbrakes[n_frontbrakes$Var1=='Single disc',2]
## Filter to only single disc and double disc
df <- filter(df, df$Front.brakes == "Single disc" | df$Front.brakes == "Double disc")
n_12_frontbrakeclean = nrow(df)
# Clean "Transmission Type"
## Save Ns for each category
n_transmission = data.frame(table(df$Transmission.type))
n_transmission_belt = n_transmission[n_transmission$Var1=='Belt',2]
n_transmission_chain = n_transmission[n_transmission$Var1=='Chain',2]
n_transmission_shaftdrive = n_transmission[n_transmission$Var1=='Shaft drive',2]
## Filter to two categories
df <- filter(df, df$Transmission.type == "Belt" | df$Transmission.type == "Chain")
n_13_transmissionclean = nrow(df)
# Clean "Category"
# Get a summary of categories
n_cat <- data.frame(table(df$Category))
cat_distinct_preclean <- nrow(n_cat)
# Filter out observations with small category
df <- filter(df, !df$Category %in% c("Cross / motocross", "Minibike, cross", "Minibike, sport", "ATV", "Sport touring")) # Where N <= 30
cat_distinct_postclean <- nrow(data.frame(table(df$Category)))
n_14_categoryclean <- nrow(df)
# Find correlations between variables
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
matrix <- cor(df_num)
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
pair_plot <- ggpairs(df,
columns = c("Torque..Nm.","Fuel.capacity..lts.", "Wheelbase..mm.", "Rating"),
columnLabels = c("Torque", "Fuel Capacity", "Wheelbase", "Rating"),
axisLabels = 'none',
switch = 'y',
aes(alpha=0.2)
)
par(mar = c(4, 4, .1, .1))
corrplot(
matrix,
method = 'color',
order ='AOE',
type ='lower',
diag = FALSE,
addCoef.col="grey",
tl.cex = 0.7,
number.cex=0.7
)
pair_plot
df %>% group_by(Engine.cylinder) %>% summarise(mean_torque=mean(Torque..Nm.))
df %>% group_by(Engine.stroke) %>% summarise(mean_torque=mean(Torque..Nm.))
df %>% group_by(Gearbox) %>% summarise(mean_torque=mean(Torque..Nm.))
# Fit models
mod1 <- lm(Rating ~ Torque..Nm.,
data=df)
mod2 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type,
data=df)
mod3 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type,
data=df)
mod4 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type
+ as.factor(Year),
data=df)
mod5 <- lm(Rating ~ Torque..Nm.
+ Fuel.capacity..lts.
+ Category
+ Wheelbase..mm.
+ Cooling.system
+ Front.brakes
+ Transmission.type
+ as.factor(Year)
+ Brand,
data=df)
# Calculate robust standard errors
se_mod1 <- mod1 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod2 <- mod2 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod3 <- mod3 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod4 <- mod4 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
se_mod5 <- mod5 %>% vcovHC(type = "HC1") %>% diag() %>% sqrt()
stargazer(mod1, mod2, mod3, mod4, mod5,
header = FALSE,
type = "latex",
title = "Estimated Regressions",
dep.var.caption  = "Output Variable: Mean Rating (1-5 scale)",
align=TRUE,
column.sep.width = "-1.5pt",
font.size = "small",
se = list(se_mod1, se_mod2, se_mod3, se_mod4, se_mod5),
covariate.labels = c(
"Torque (Nm)",
"Fuel Capacity (Litres)",
"Category: Classic",
"Category: Custom / cruiser",
"Category: Enduro / offroad",
"Category: Naked bike",
"Category: Scooter",
"Category: Sport",
"Category: Super motard",
"Category: Touring",
"Constant"
),
omit = c("Year", "Brand", "Dry", "Wheelbase", "Brakes", "Seat", "Cooling", "Front.brakes", "Transmission"),
notes.label= "Significance levels",
float=TRUE,
table.placement="H",
omit.stat=c("adj.rsq","f"),
add.lines = list(
c("Wheelbase (mm)", "", "\\checkmark", "\\checkmark", "\\checkmark ", "\\checkmark"),
c("Cooling System", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Front Brakes", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Transmission Type", "", "\\checkmark", "\\checkmark", "\\checkmark", "\\checkmark"),
c("Year", "", "", "", "\\checkmark", "\\checkmark"),
c("Brand", "", "", "", "", "\\checkmark"),
"\\hline"
),
star.cutoffs = c(0.05, 0.01, 0.001)
)
?corrplot
?cor
?ggpairs
?cor
# Find correlations between variables
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
matrix <- cor(df_num, method="pearson")
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
pair_plot <- ggpairs(df,
columns = c("Torque..Nm.","Fuel.capacity..lts.", "Wheelbase..mm.", "Rating"),
columnLabels = c("Torque", "Fuel Capacity", "Wheelbase", "Rating"),
axisLabels = 'none',
switch = 'y',
aes(alpha=0.2)
)
par(mar = c(4, 4, .1, .1))
corrplot(
matrix,
method = 'color',
order ='AOE',
type ='lower',
diag = FALSE,
addCoef.col="grey",
tl.cex = 0.8,
number.cex=0.8
)
pair_plot
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
# Create correlation matrix
matrix <- cor(df_num, use="everything", method=c("pearson"))
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
# Create correlation matrix
matrix <- cor(df_num, method="pearson")
# colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
# rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
pair_plot <- ggpairs(df,
columns = c("Torque..Nm.","Fuel.capacity..lts.", "Wheelbase..mm.", "Rating"),
columnLabels = c("Torque", "Fuel Capacity", "Wheelbase", "Rating"),
axisLabels = 'none',
switch = 'y',
aes(alpha=0.2)
)
par(mar = c(4, 4, .1, .1))
corrplot(
matrix,
method = 'color',
order ='AOE',
type ='lower',
diag = FALSE,
addCoef.col="grey",
tl.cex = 0.8,
number.cex=0.8
)
pair_plot
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
# Create correlation matrix
matrix <- cor(df_num, method="pearson")
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
matrix
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
# Create correlation matrix
matrix <- cor(df_num, method="pearson")
matrix
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
matrix
# Prepare dataframe containing only numeric variables
num_cols <- unlist(lapply(df, is.numeric))
df_num <- df[,num_cols]
df_num = select(df_num, -Year)
# Create correlation matrix
matrix <- cor(df_num, method="pearson")
data.frame(matrix)
colnames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
rownames(matrix) <- c("Dry Weight", "Wheelbase", "Displacement", "Torque", "Bore", "Fuel Capacity", "Rating", "Power","Seat Height")
data.frame(matrix)
